//
//  SignInViewController.swift
//  Pods
//
//  Created Rystem Asqar on 4/28/24.
//  Copyright © 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by Dastan Makhutov @mchutov
//

import UIKit
import SnapKit
import CommonUI
import Register

final class SignInViewController: UIViewController, SignInViewProtocol {
	var presenter: SignInPresenterProtocol?
    
    private lazy var logo: UIImageView = {
        let image = UIImageView()
        image.image = UIImage(named: "logo")
        return image
    }()
    
    private lazy var buttonConfiguration: UIButton.Configuration = {
        var configuration = UIButton.Configuration.filled()
        configuration.imagePlacement = .leading
        configuration.baseBackgroundColor = .clear
        configuration.baseForegroundColor = .black
        configuration.imagePadding = 6
        configuration.titlePadding = 6
        return configuration
    }()
    private lazy var primaryLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 28, weight: .bold)
        label.textAlignment = .left
        label.textColor = UIColor(named: "Main")
        return label
    }()
    private lazy var secondaryLabel: UILabel = {
        let label = UILabel()
        label.font = .systemFont(ofSize: 16, weight: .regular)
        label.textAlignment = .left
        label.numberOfLines = 2
        label.textColor = .black
        label.layer.opacity = 0.7
        return label
    }()
    private lazy var googleButton: UIButton = {
        let button = UIButton(configuration: buttonConfiguration)
        button.setTitle("Войти через Google", for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .semibold)
        button.layer.cornerRadius = 12
        button.layer.borderWidth = 2
        button.layer.borderColor = UIColor.lightGray.cgColor
        button.setImage(UIImage(named: "googleLogo"), for: .normal)
//        button.addTarget(self, action: #selector(loginGoogleButtonTapped), for: .touchUpInside)
        return button
    }()
    private lazy var appleButton: UIButton = {
        let button = UIButton(configuration: buttonConfiguration)
        button.setTitle("Войти через Apple", for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 16, weight: .semibold)
        button.layer.cornerRadius = 12
        button.layer.borderWidth = 2
        button.layer.borderColor = UIColor.lightGray.cgColor
        button.setImage(UIImage(named: "appleLogo"), for: .normal)
//        button.addTarget(self, action: #selector(loginGoogleButtonTapped), for: .touchUpInside)
        return button
    }()
    private lazy var emailTextField: BlueTextField = {
        var textField = BlueTextField()
        textField.placeholder = "email@gmail.com"
        textField.font = .systemFont(ofSize: 16, weight: .regular)
        textField.textColor = .black
        textField.keyboardType = .emailAddress
        textField.autocapitalizationType = .none
        textField.backgroundColor = UIColor(named: "lightGray2")
        textField.button.setImage(UIImage(named: "closeIcon"), for: .normal)
        textField.button.isHidden = true
        textField.setLeftPaddingPoints(16)
        textField.setRightPaddingPoints(48)
        textField.inputAccessoryView = createKeyboardToolBar()
        textField.addTarget(self, action: #selector(emailTextDidChange(_:)), for: .editingChanged)
        textField.closure = { [weak self] in
            textField.text = ""
            textField.clearBorder()
            textField.button.isHidden = true
            self?.loginButton.isEnabled = false
        }
        return textField
    }()
    private lazy var passwordTextField: BlueTextField = {
        var textField = BlueTextField()
        textField.placeholder = "Введите пароль"
        textField.font = .systemFont(ofSize: 16, weight: .regular)
        textField.textColor = .black
        textField.keyboardType = .emailAddress
        textField.autocapitalizationType = .none
        textField.backgroundColor = UIColor(named: "lightGray2")
        textField.isSecureTextEntry = true
        textField.button.setImage(UIImage(named: "hideIcon"), for: .normal)
        textField.setLeftPaddingPoints(16)
        textField.setRightPaddingPoints(48)
//        textField.addTarget(self, action: #selector(passwordTextDidChange(_:)), for: .editingChanged)
        textField.inputAccessoryView = createKeyboardToolBar()
        textField.closure = {
            if textField.text != "" {
                textField.isSecureTextEntry = !textField.isSecureTextEntry
                if textField.isSecureTextEntry {
                    textField.button.setImage(UIImage(named: "hideIcon"), for: .normal)
                } else {
                    textField.button.setImage(UIImage(named: "showIcon"), for: .normal)
                }
            }
        }
        return textField
    }()
    private lazy var rightLineSeperator: UIView = {
        let view = UIView()
        view.backgroundColor = .lightGray
        return view
    }()
    private lazy var orLabel: UILabel = {
        let label = UILabel()
        label.text = "или через"
        label.font = .systemFont(ofSize: 14, weight: .regular)
        label.textColor = #colorLiteral(red: 0.1764705882, green: 0.1843137255, blue: 0.1647058824, alpha: 1)
        label.textAlignment = .center
        label.numberOfLines = 0
        return label
    }()
    private lazy var leftLineSeperator: UIView = {
        let view = UIView()
        view.backgroundColor = .lightGray
        return view
    }()
    private lazy var forgetPasswordButton: UIButton = {
        let button = UIButton(type: .system)
        button.setTitle("Забыли пароль?", for: .normal)
        button.titleLabel?.font = .systemFont(ofSize: 12, weight: .regular)
        button.tintColor = .gray
//        button.addTarget(self, action: #selector(forgetPasswordButtonTapped), for: .touchUpInside)
        return button
    }()
    
    private lazy var loginButton: UIButton = {
        let button = UIButton()
        button.setTitle("Войти", for: .normal)
        button.layer.cornerRadius = 12
        button.layer.borderWidth = 2
        button.backgroundColor = UIColor(named: "Main")
        button.addTarget(self, action: #selector(loginButtonTapped), for: .touchUpInside)
        return button
    }()
    private lazy var notHaveAccountLabel: UILabel = {
        let label = UILabel()
        label.textAlignment = .center
        label.attributedText = createAttributedString()
        label.isUserInteractionEnabled = true
        label.addGestureRecognizer(UITapGestureRecognizer(target:self, action: #selector(registerButtonTapped)))
        return label
    }()
    

	override func viewDidLoad() {
        super.viewDidLoad()
        configure()
        configureViews()
        configureConstraints()
    }
}
extension SignInViewController {
    
    func configureViews() {
        view.backgroundColor = .white
        view.addSubview(primaryLabel)
        view.addSubview(secondaryLabel)
        view.addSubview(googleButton)
        view.addSubview(appleButton)
        view.addSubview(emailTextField)
        view.addSubview(loginButton)
        view.addSubview(passwordTextField)
        view.addSubview(forgetPasswordButton)
        view.addSubview(leftLineSeperator)
        view.addSubview(orLabel)
        view.addSubview(rightLineSeperator)
        view.addSubview(notHaveAccountLabel)
        view.addSubview(logo)
    }
    func configureConstraints() {
        logo.snp.makeConstraints {
            $0.top.equalToSuperview().offset(70)
            $0.centerX.equalToSuperview()
            $0.height.width.equalTo(100)
        }
        primaryLabel.snp.makeConstraints {
            $0.top.equalTo(logo.snp.bottom).offset(20)
            $0.left.equalToSuperview().offset(16)
            $0.right.equalToSuperview().offset(-16)
        }
        secondaryLabel.snp.makeConstraints {
            $0.top.equalTo(primaryLabel.snp.bottom).offset(5)
            $0.left.equalToSuperview().offset(16)
            $0.right.equalToSuperview().offset(-16)
        }
        googleButton.snp.makeConstraints {
            $0.top.equalTo(secondaryLabel.snp.bottom).offset(30)
            $0.left.equalToSuperview().offset(16)
            $0.right.equalToSuperview().offset(-16)
            $0.height.equalTo(50)
        }
        appleButton.snp.makeConstraints {
            $0.top.equalTo(googleButton.snp.bottom).offset(8)
            $0.left.equalToSuperview().offset(16)
            $0.right.equalToSuperview().offset(-16)
            $0.height.equalTo(50)
        }
        leftLineSeperator.snp.makeConstraints {
            $0.centerY.equalTo(orLabel.snp.centerY)
            $0.left.equalToSuperview().offset(24)
            $0.right.equalTo(orLabel.snp.left).offset(-16)
            $0.height.equalTo(1)
        }
        
        orLabel.snp.makeConstraints {
            $0.top.equalTo(appleButton.snp.bottom).offset(40)
            $0.centerX.equalToSuperview()
        }
        
        rightLineSeperator.snp.makeConstraints {
            $0.centerY.equalTo(orLabel.snp.centerY)
            $0.left.equalTo(orLabel.snp.right).offset(16)
            $0.right.equalToSuperview().offset(-24)
            $0.height.equalTo(1)
        }
        emailTextField.snp.makeConstraints {
            $0.top.equalTo(orLabel.snp.bottom).offset(40)
            $0.left.equalToSuperview().offset(16)
            $0.right.equalToSuperview().offset(-16)
            $0.height.equalTo(50)
        }
        passwordTextField.snp.makeConstraints {
            $0.top.equalTo(emailTextField.snp.bottom).offset(20)
            $0.left.equalToSuperview().offset(16)
            $0.right.equalToSuperview().offset(-16)
            $0.height.equalTo(50)
        }
        forgetPasswordButton.snp.makeConstraints {
            $0.top.equalTo(passwordTextField.snp.bottom).offset(4)
            $0.right.equalToSuperview().offset(-16)
            $0.height.equalTo(20)
        }
        loginButton.snp.makeConstraints {
            $0.top.equalTo(passwordTextField.snp.bottom).offset(70)
            $0.left.equalToSuperview().offset(16)
            $0.right.equalToSuperview().offset(-16)
            $0.height.equalTo(50)
        }
        notHaveAccountLabel.snp.makeConstraints {
            $0.top.equalTo(loginButton.snp.bottom).offset(10)
            $0.centerX.equalToSuperview()
        }
    }
    func configure() {
        primaryLabel.text = "Добро пожаловать"
        secondaryLabel.text = "Введите свою почту и пароль, чтобы войти в свой аккаунт"
    }
}

extension SignInViewController {
    
    @objc func registerButtonTapped() {
        print("button tapped.. ")
        let bottomSheetVC = RegisterViewController()
        
        presentBottomSheet(viewController: bottomSheetVC)
    }
    
    func presentBottomSheet(viewController: RegisterViewController) {
        viewController.modalPresentationStyle = .pageSheet
        present(viewController, animated: true, completion: nil)
    }
    
    private func createKeyboardToolBar() -> UIToolbar {
        let toolBar = UIToolbar()
        let flexibleSpace = UIBarButtonItem(barButtonSystemItem: .flexibleSpace,
                                            target: self,
                                            action: nil)
        
        let doneButton = UIBarButtonItem(barButtonSystemItem: .done,
                                         target: self,
                                         action: #selector(toolBarButtonTapped))
        
        toolBar.sizeToFit()
        toolBar.setItems([flexibleSpace, doneButton], animated: true)
        
        return toolBar
    }
    @objc
    private func toolBarButtonTapped() {
        if passwordTextField.text == "" {
            passwordTextField.becomeFirstResponder()
        } else if emailTextField.text != "" {
            print("noting")
        }
    }
    private func createAttributedString() -> NSMutableAttributedString {
        let finalStr = NSMutableAttributedString()
        let leftPartStr = NSMutableAttributedString(string: "Ещё не создали аккаунт?",
                                                    attributes: [NSAttributedString.Key.foregroundColor: UIColor(red: 112 / 255,
                                                                                                                 green: 115 / 255,
                                                                                                                 blue: 116 / 255,
                                                                                                                 alpha: 1),
                                                                 NSAttributedString.Key.font: UIFont.systemFont(ofSize: 12,
                                                                                                                weight: .medium)])
        
        let rightPartStr = NSMutableAttributedString(string: " Зарегистрироваться",
                                                     attributes: [NSAttributedString.Key.foregroundColor: UIColor(named: "Main"),
                                                                  NSAttributedString.Key.font: UIFont.systemFont(ofSize: 12,
                                                                                                                 weight: .bold)])
        finalStr.append(leftPartStr)
        finalStr.append(rightPartStr)
        
        return finalStr
    }
}

extension SignInViewController {
    func showAlert(alert: UIAlertController) {
        present(alert, animated: true)
    }
}

extension SignInViewController {
    
    @objc
    private func loginButtonTapped() {
        print("Login button tapped.. ")
        presenter?.didTapLoginButton(
            withEmail: emailTextField.text,
            password: passwordTextField.text
        )
    }
    
    @objc
    private func emailTextDidChange(_ textField: BlueTextField) {
        if let text = textField.text {
            if text != "" {
                if text.isValidEmail() {
                    textField.showSuccessState()
                    presenter?.setEmailProperty(true)
                    if let isValid = presenter?.isValidPassword(), isValid {
                        loginButton.isEnabled = true
                    }
                } else {
                    textField.showErrorState()
                    presenter?.setEmailProperty(false)
                    loginButton.isEnabled = false
                }
                textField.button.isHidden = false
            } else {
                textField.clearBorder()
                textField.button.isHidden = true
                loginButton.isEnabled = false
                presenter?.setEmailProperty(false)
            }
        }
    }
    
    @objc
    private func passwordTextDidChange(_ textField: BlueTextField) {
        if let text = textField.text {
            if text != "" {
                if text.count >= 8 {
                    presenter?.setPasswordProperty(true)
                }
                
                if let isValidEmail = presenter?.isValidEmail(), isValidEmail,  text.count >= 8 {
                    loginButton.isEnabled = true
                } else {
                    loginButton.isEnabled = false
                }
            } else {
                textField.clearBorder()
                textField.button.setImage(UIImage(named: "hideIcon"), for: .normal)
                textField.isSecureTextEntry = true
                presenter?.setPasswordProperty(false)
                loginButton.isEnabled = false
            }
        }
    }
}
